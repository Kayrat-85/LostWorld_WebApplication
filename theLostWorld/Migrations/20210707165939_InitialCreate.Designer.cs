// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using theLostWorld.Domain;

namespace theLostWorld.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210707165939_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "44546e06-8719-4ad8-b88a-f271ae9d6eab",
                            ConcurrencyStamp = "29c47b46-9221-4ffb-9613-0ecf5fc66ace",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3b62472e-4f66-49fa-a20f-e7685b9565d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "377e4853-149a-4439-8cbb-b09d13181875",
                            Email = "kayrat_tekebayev@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAYRAT_TEKEBAYEV@MAIL.RU",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEF5XfBvfBLEZzBtxLbY5hh0sppTeGzMJHa3bvSyDMuMuaXhwqzy+DzNQ8FBRTYIzlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3b62472e-4f66-49fa-a20f-e7685b9565d8",
                            RoleId = "44546e06-8719-4ad8-b88a-f271ae9d6eab"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("theLostWorld.Domain.Entities.Anthropogenesis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Anthropogenesis");
                });

            modelBuilder.Entity("theLostWorld.Domain.Entities.DinosaursAquatic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DinosaursAquatics");
                });

            modelBuilder.Entity("theLostWorld.Domain.Entities.DinosaursFlying", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DinosaursFlyings");
                });

            modelBuilder.Entity("theLostWorld.Domain.Entities.DinosaursHerbivores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DinosaursHerbivore");
                });

            modelBuilder.Entity("theLostWorld.Domain.Entities.DinosaursPredators", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DinosaursPredator");
                });

            modelBuilder.Entity("theLostWorld.Domain.Entities.MammalsHerbivores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MammalsHerbivores");
                });

            modelBuilder.Entity("theLostWorld.Domain.Entities.MammalsPredators", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MammalsPredators");
                });

            modelBuilder.Entity("theLostWorld.Domain.Entities.ServiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceItems");
                });

            modelBuilder.Entity("theLostWorld.Domain.Entities.TextField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TextFields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63dc8fa6-07ae-4391-8916-e057f71239ce"),
                            CodeWord = "PageIndex",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(798),
                            Text = "Содержание заполняется администратором",
                            Title = "Главная"
                        },
                        new
                        {
                            Id = new Guid("70bf165a-700a-4156-91c0-e83fce0a277f"),
                            CodeWord = "PageDinosaursPredators",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(5151),
                            Text = "Содержание заполняется администратором",
                            Title = "Хищные динозавры"
                        },
                        new
                        {
                            Id = new Guid("a463fe1a-74dd-4f2f-8f09-1ca13afdffd3"),
                            CodeWord = "PageDinosaursHerbivores",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(5269),
                            Text = "Содержание заполняется администратором",
                            Title = "Травоядные динозавры"
                        },
                        new
                        {
                            Id = new Guid("f66c3438-7fae-4b5e-936d-b030f4dfffb1"),
                            CodeWord = "PageDinosaursFlyings",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(5333),
                            Text = "Содержание заполняется администратором",
                            Title = "Летающие динозавры"
                        },
                        new
                        {
                            Id = new Guid("2f604579-3dd8-4048-b4ef-300484cd4a99"),
                            CodeWord = "PageDinosaursAquatic",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(5461),
                            Text = "Содержание заполняется администратором",
                            Title = "Водные динозавры"
                        },
                        new
                        {
                            Id = new Guid("4aa76a4c-c59d-409a-84c1-06e6487a137a"),
                            CodeWord = "PageNews",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(5530),
                            Text = "Содержание заполняется администратором",
                            Title = "Новости"
                        },
                        new
                        {
                            Id = new Guid("04e664e6-26d9-4fc7-ad2e-7cc0894a7d27"),
                            CodeWord = "PageMammalsPredators",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(5766),
                            Text = "Содержание заполняется администратором",
                            Title = "Хищные млекопитающие"
                        },
                        new
                        {
                            Id = new Guid("8163839a-dce8-402d-be29-f57615395f28"),
                            CodeWord = "PageMammalsHerbivores",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(5849),
                            Text = "Содержание заполняется администратором",
                            Title = "Травояднык млекопитающие"
                        },
                        new
                        {
                            Id = new Guid("0e2f8edc-13d3-427d-9e68-ce83b3a563bf"),
                            CodeWord = "PageAnthropogenesis",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(5908),
                            Text = "Содержание заполняется администратором",
                            Title = "Антропогенез"
                        },
                        new
                        {
                            Id = new Guid("c023faf9-369d-4cb4-a8dd-8d2ccbf3cb33"),
                            CodeWord = "PageAboutMe",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(5971),
                            Text = "Содержание заполняется администратором",
                            Title = "Контакты"
                        },
                        new
                        {
                            Id = new Guid("67450832-3ede-4420-861f-a04d4f536e30"),
                            CodeWord = "PageMyWebProject",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6028),
                            Text = "Содержание заполняется администратором",
                            Title = "О проекте"
                        },
                        new
                        {
                            Id = new Guid("14372a40-774c-4551-8215-c557ccc43c14"),
                            CodeWord = "PageTriassic",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6083),
                            Text = "Содержание заполняется администратором",
                            Title = "Триасовый период"
                        },
                        new
                        {
                            Id = new Guid("b4aaa792-092a-4a9e-9c4d-2b6b916a65f8"),
                            CodeWord = "PageJurassic",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6137),
                            Text = "Содержание заполняется администратором",
                            Title = "Юрский период"
                        },
                        new
                        {
                            Id = new Guid("1e7a21df-ad48-4872-a325-687f9414c361"),
                            CodeWord = "PageCretaceous",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6193),
                            Text = "Содержание заполняется администратором",
                            Title = "Меловой период"
                        },
                        new
                        {
                            Id = new Guid("9edf8766-b00f-4781-a358-a8650ba78507"),
                            CodeWord = "PagePaleogene",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6246),
                            Text = "Содержание заполняется администратором",
                            Title = "Палеогеновый период"
                        },
                        new
                        {
                            Id = new Guid("6d9eecb0-2912-4883-ac8a-045a3c0c769a"),
                            CodeWord = "PageNeogene",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6301),
                            Text = "Содержание заполняется администратором",
                            Title = "Неогеновый период"
                        },
                        new
                        {
                            Id = new Guid("6dbe2258-400e-4d1b-853d-4331cac8dec7"),
                            CodeWord = "PageQuaternary",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6355),
                            Text = "Содержание заполняется администратором",
                            Title = "Четвертичный период"
                        },
                        new
                        {
                            Id = new Guid("38ea5137-e57d-4be5-a098-e56459caf2ed"),
                            CodeWord = "PageCambrian",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6415),
                            Text = "Содержание заполняется администратором",
                            Title = "Кембрийский период"
                        },
                        new
                        {
                            Id = new Guid("2656ced9-2652-4319-8d73-682ae34a542b"),
                            CodeWord = "PageOrdovician",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6471),
                            Text = "Содержание заполняется администратором",
                            Title = "Ордовикский период"
                        },
                        new
                        {
                            Id = new Guid("e5345fec-bff0-4ca4-bb70-073506051976"),
                            CodeWord = "PageSilurian",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6525),
                            Text = "Содержание заполняется администратором",
                            Title = "Силурийский период"
                        },
                        new
                        {
                            Id = new Guid("5595b92d-23ec-456c-a29d-531d052b0543"),
                            CodeWord = "PageDevonian",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6581),
                            Text = "Содержание заполняется администратором",
                            Title = "Девонский период"
                        },
                        new
                        {
                            Id = new Guid("5a8ed9ad-6a10-499e-b475-4b693bc2da70"),
                            CodeWord = "PageCarboniferous",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6635),
                            Text = "Содержание заполняется администратором",
                            Title = "Каменноугольный период"
                        },
                        new
                        {
                            Id = new Guid("613faf6e-200b-4081-ac67-d0dd4d09f506"),
                            CodeWord = "PagePermian",
                            DateAdded = new DateTime(2021, 7, 7, 16, 59, 38, 86, DateTimeKind.Utc).AddTicks(6688),
                            Text = "Содержание заполняется администратором",
                            Title = "Пермский период"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
